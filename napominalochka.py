import asyncio
import random
import json
import os
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

TOKEN = "MY_TOKEN_TELEGRAMM"

# ---------------------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------------------
STATE_START, STATE_TEXT, STATE_CALENDAR, STATE_HOUR, STATE_MINUTE, STATE_REPEAT = range(6)
STATE_SELECT_REMINDER, STATE_CONFIRM_STOP, STATE_TIMEZONE = range(6, 9)

# ---------------------- –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ----------------------
DATA_FILE = "user_data.json"
TIMEZONE_FILE = "user_timezones.json"

# ---------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------------------
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_data_store, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_timezones():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(TIMEZONE_FILE):
        try:
            with open(TIMEZONE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                return {int(k): v for k, v in data.items()}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {e}")
    return {}

def save_timezones():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open(TIMEZONE_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_timezones, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {e}")

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â ----------------------
user_data_store = load_data()
user_timezones = load_timezones()
scheduled_jobs = {}

# ---------------------- –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –†–æ—Å—Å–∏–∏ ----------------------
RUSSIAN_TIMEZONES = {
    'kaliningrad': ('–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)', 'Europe/Kaliningrad'),
    'moscow': ('–ú–æ—Å–∫–≤–∞ (UTC+3)', 'Europe/Moscow'),
    'samara': ('–°–∞–º–∞—Ä–∞ (UTC+4)', 'Europe/Samara'),
    'yekaterinburg': ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)', 'Asia/Yekaterinburg'),
    'omsk': ('–û–º—Å–∫ (UTC+6)', 'Asia/Omsk'),
    'krasnoyarsk': ('–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)', 'Asia/Krasnoyarsk'),
    'irkutsk': ('–ò—Ä–∫—É—Ç—Å–∫ (UTC+8)', 'Asia/Irkutsk'),
    'yakutsk': ('–Ø–∫—É—Ç—Å–∫ (UTC+9)', 'Asia/Yakutsk'),
    'vladivostok': ('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)', 'Asia/Vladivostok'),
    'magadan': ('–ú–∞–≥–∞–¥–∞–Ω (UTC+11)', 'Asia/Magadan'),
    'kamchatka': ('–ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)', 'Asia/Kamchatka')
}

# ---------------------- –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–ª—å–±–æ–º–∞ ----------------------
IMAGE_URLS = [
    "https://disk.yandex.ru/i/3Sjt2RqIUVAaCw",
    "https://disk.yandex.ru/i/gzKwRm4XKVGJ7g",
    "https://disk.yandex.ru/i/OT2qZd--RbREVQ",
    "https://disk.yandex.ru/i/CZCi-mCeVcuymA",
    "https://disk.yandex.ru/i/VQuABgUCarlpSw",
    "https://disk.yandex.ru/i/sUxKzgK4UhHvBg",
    "https://disk.yandex.ru/i/iOY8_iw5N8oOQA",
    "https://disk.yandex.ru/i/gSPXWv2HD5YSig",
    "https://disk.yandex.ru/i/EMygqNBOrY10Kw",
    "https://disk.yandex.ru/i/f9SttRwwTnEiSA",
    "https://disk.yandex.ru/i/wMjMhoOPUxuoNQ"
]

def get_random_image():
    return random.choice(IMAGE_URLS)

def get_user_timezone(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return user_timezones.get(user_id, 'Europe/Moscow')

# ---------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------------------
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    reminder_text = job.data["text"]
    
    random_image = get_random_image()
    
    try:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=random_image,
            caption=f"–≠—Ç —Ç–≤–æ—è –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞, —Ç—ã —Ö–æ—Ç–µ–ª—å {reminder_text} –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ —Ç–µ–±–µ –¥–µ–Ω—å–∫–∞üíñ"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ---------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------------------
async def send_hidden_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    reminder_text = job.data["text"]
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–¢—ã —Å–¥–µ–ª–∞–ª—å? {reminder_text} üòº"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ---------------------- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------------------
async def schedule_reminder(user_id, context: ContextTypes.DEFAULT_TYPE, reminder_data):
    try:
        reminder_text = reminder_data["text"]
        date_str = reminder_data["date"]
        hour = reminder_data["hour"]
        minute = reminder_data["minute"]
        repeat = reminder_data.get("repeat", "no_repeat")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tz = get_user_timezone(user_id)
        user_timezone = pytz.timezone(user_tz)
        
        # –°–æ–∑–¥–∞–µ–º datetime –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reminder_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        reminder_datetime_naive = datetime.combine(reminder_date, datetime.min.time()).replace(hour=hour, minute=minute)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –≤ UTC
        reminder_datetime_user = user_timezone.localize(reminder_datetime_naive)
        reminder_datetime_utc = reminder_datetime_user.astimezone(pytz.UTC)
        
        # –í—Ä–µ–º—è –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç)
        hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
        now_utc = datetime.now(pytz.UTC)
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª: {hour}:{minute} –≤ –ø–æ—è—Å–µ {user_tz}")
        print(f"–≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {reminder_datetime_utc.strftime('%H:%M')} UTC")
        print(f"–°–∫—Ä—ã—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {hidden_reminder_datetime_utc.strftime('%H:%M')} UTC")
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
        if reminder_datetime_utc < now_utc:
            if repeat == "no_repeat":
                # –î–ª—è –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                reminder_datetime_utc = now_utc + timedelta(seconds=10)
                hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
                if repeat == "daily":
                    reminder_datetime_utc += timedelta(days=1)
                    hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
                elif repeat == "weekly":
                    reminder_datetime_utc += timedelta(weeks=1)
                    hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
                elif repeat == "monthly":
                    reminder_datetime_utc += timedelta(days=30)
                    hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
                elif repeat == "yearly":
                    reminder_datetime_utc += timedelta(days=365)
                    hidden_reminder_datetime_utc = reminder_datetime_utc + timedelta(minutes=10)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á
        job_name = f"reminder_{user_id}_{datetime.now().timestamp()}"
        hidden_job_name = f"hidden_reminder_{user_id}_{datetime.now().timestamp()}"
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ UTC
        context.job_queue.run_once(
            send_reminder,
            when=reminder_datetime_utc,
            data={
                "user_id": user_id,
                "text": reminder_text
            },
            name=job_name
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        context.job_queue.run_once(
            send_hidden_reminder,
            when=hidden_reminder_datetime_utc,
            data={
                "user_id": user_id,
                "text": reminder_text
            },
            name=hidden_job_name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
        if user_id not in scheduled_jobs:
            scheduled_jobs[user_id] = []
        scheduled_jobs[user_id].append({
            "job_name": job_name,
            "hidden_job_name": hidden_job_name,
            "text": reminder_text,
            "datetime": reminder_datetime_utc,
            "hidden_datetime": hidden_reminder_datetime_utc,
            "repeat": repeat
        })
        
        user_time = reminder_datetime_utc.astimezone(user_timezone)
        hidden_user_time = hidden_reminder_datetime_utc.astimezone(user_timezone)
        print(f"–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {user_time.strftime('%Y-%m-%d %H:%M')} –≤ –ø–æ—è—Å–µ {user_tz}")
        print(f"–°–∫—Ä—ã—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {hidden_user_time.strftime('%Y-%m-%d %H:%M')} –≤ –ø–æ—è—Å–µ {user_tz}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        save_data()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ---------------------- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ----------------------
def restore_reminders(application):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    for user_id_str, reminders in user_data_store.items():
        user_id = int(user_id_str)
        for reminder in reminders:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if all(key in reminder for key in ['text', 'date', 'hour', 'minute']):
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    async def schedule_reminder_job(context):
                        await schedule_reminder(user_id, context, reminder)
                    
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
                    application.job_queue.run_once(schedule_reminder_job, when=1)
                    print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reminder['text']}")
                else:
                    print(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ---------------------- –°—Ç–∞—Ä—Ç ----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ß—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", callback_data="what")],
        [InlineKeyboardButton("–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ—á–∫–∏", callback_data="my_reminders")],
        [InlineKeyboardButton("–ú–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="timezone")],
        [InlineKeyboardButton("–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", callback_data="chat_with_me")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="support_author")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ç—å", callback_data="stop")]
    ]
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫!üê± –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞–µ–º:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        query = update.callback_query
        try:
            await query.answer()
        except:
            pass
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫!üê± –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞–µ–º:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_START

# ---------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ----------------------
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass

    user_id = query.from_user.id
    data = query.data

    # ---------------- –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ----------------
    if data == "what":
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]]
        await query.edit_message_text("–í–≤–µ–¥–∏, —á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_TEXT

    elif data == "my_reminders":
        reminders = user_data_store.get(str(user_id), [])
        if not reminders:
            text = "–¢—É—Ç—å –ø—É—Å—Ç–æ üëâüëà"
        else:
            text_list = []
            for r in reminders:
                reminder_text = r.get('text', "?")
                if "date" in r and "hour" in r and "minute" in r:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    date_str = r['date']
                    hour = r['hour']
                    minute = r['minute']
                    user_tz = get_user_timezone(user_id)
                    user_timezone = pytz.timezone(user_tz)
                    
                    reminder_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                    reminder_datetime = user_timezone.localize(
                        datetime.combine(reminder_date, datetime.min.time()).replace(hour=hour, minute=minute)
                    )
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—è—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    tz_name = "–ú–æ—Å–∫–≤–∞"
                    for key, value in RUSSIAN_TIMEZONES.items():
                        if value[1] == user_tz:
                            tz_name = value[0]
                            break
                    
                    text_list.append(f"{reminder_text} ‚Äî {reminder_datetime.strftime('%d.%m.%Y %H:%M')} ({tz_name.split(' ')[0]})")
                else:
                    text_list.append(f"{reminder_text} ‚Äî –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã üòø")
            text = "–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∏:\n" + "\n".join(text_list)
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_START

    # ---------------- –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ----------------
    elif data == "support_author":
        support_message = (
            "–≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞ –¥–ª—è —Ç–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞, –Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, "
            "—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∞–ª–æ—á–∫—É –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2202206413185344 –ü–∞–≤–µ–ª –î."
        )
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.edit_message_text(support_message, reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_START

    # ---------------- –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π ----------------
    elif data == "chat_with_me":
        chat_message = (
            "–≠—Ö—ä, —è —Ç–æ–∂–µ –æ—á–µ–Ω—å —Ö–æ—á—É —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ —è –Ω–µ —É–º–µ—é —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, —É –º–µ–Ω—è –ª–∞–ø–∫–∏ üòø "
            "–ù–æ —Å–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å –∏ –º—ã —Å–º–æ–∂–µ–º —Å —Ç–æ–±–æ–π –±–æ–ª—Ç–∞—Ç—å!"
        )
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.edit_message_text(chat_message, reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_START

    # ---------------- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ----------------
    elif data == "timezone":
        user_tz = user_timezones.get(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if user_tz and not context.user_data.get('timezone_changed'):
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–ø—É—Å–∫–µ
            context.user_data['timezone_changed'] = True
            message = "–í–∏–¥–∞—Ç—å —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∑–∞–º—É—Ä—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫! –î–∞–≤–∞–π –ø–æ–º–µ–Ω—è–µ–º —Ç–≤–æ–π –ø–æ—è—Å üèñÔ∏è"
        elif user_tz and context.user_data.get('timezone_changed'):
            # –í—Ç–æ—Ä–æ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—ã - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            message = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
            context.user_data['timezone_changed'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        else:
            # –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
            message = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        keyboard = []
        row = []
        for i, (key, (name, tz)) in enumerate(RUSSIAN_TIMEZONES.items(), 1):
            row.append(InlineKeyboardButton(name, callback_data=f"tz_{key}"))
            if i % 2 == 0:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                keyboard.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")])
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_TIMEZONE

    elif data.startswith("tz_"):
        tz_key = data.split("_")[1]
        if tz_key in RUSSIAN_TIMEZONES:
            user_timezones[user_id] = RUSSIAN_TIMEZONES[tz_key][1]
            tz_name = RUSSIAN_TIMEZONES[tz_key][0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            save_timezones()
            
            await query.edit_message_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name} üïê\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ç–≤–æ—ë–º –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]])
            )
            return STATE_START

    # ---------------- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------------
    elif data == "stop":
        reminders = user_data_store.get(str(user_id), [])
        if not reminders:
            await query.edit_message_text("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω—É–ª–µ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ üòø")
            return STATE_START
        keyboard = [[InlineKeyboardButton(r['text'], callback_data=f"stop_{idx}")] for idx, r in enumerate(reminders)]
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_SELECT_REMINDER

    elif data.startswith("stop_"):
        idx = int(data.split("_")[1])
        reminders = user_data_store.get(str(user_id), [])
        if idx >= len(reminders):
            await query.edit_message_text("–û—à–∏–±–∫–∞: –≤ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞—Ö –ø—É—Å—Ç–æ üôÄ")
            return STATE_START

        context.user_data['stop_index'] = idx
        reminder_name = reminders[idx].get('text', "?")
        keyboard = [
            [InlineKeyboardButton("–¢–æ—á–Ω–æ?", callback_data="confirm_stop")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]
        ]
        await query.edit_message_text(f"–¢—ã –≤—ã–±—Ä–∞–ª: {reminder_name}\n–•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_CONFIRM_STOP

    elif data == "confirm_stop":
        idx = context.user_data.get('stop_index')
        reminders = user_data_store.get(str(user_id), [])

        if idx is not None and idx < len(reminders):
            removed = reminders.pop(idx)
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–æ—Å–Ω–æ–≤–Ω—É—é –∏ —Å–∫—Ä—ã—Ç—É—é)
            if user_id in scheduled_jobs and idx < len(scheduled_jobs[user_id]):
                job_info = scheduled_jobs[user_id].pop(idx)
                # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –≤ job_queue
                current_jobs = context.job_queue.get_jobs_by_name(job_info["job_name"])
                for job in current_jobs:
                    job.schedule_removal()
                
                hidden_jobs = context.job_queue.get_jobs_by_name(job_info["hidden_job_name"])
                for job in hidden_jobs:
                    job.schedule_removal()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            save_data()
            
            await query.edit_message_text(f"–ù–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞ '{removed.get('text', '?')}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞üòª")
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –≤ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞—Ö –ø—É—Å—Ç–æüôÄ")
        context.user_data.pop('stop_index', None)
        return await start(update, context)

    elif data == "change":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫—É:")
        return STATE_TEXT

    elif data == "back_to_start":
        return await start(update, context)

    # ---------------- –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ----------------
    elif data == "when":
        if str(user_id) not in user_data_store or not user_data_store[str(user_id)]:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–ºüê±")
            return STATE_TEXT
        await show_calendar(update, context)
        return STATE_CALENDAR

    # ---------------- –í—ã–±–æ—Ä –¥–∞—Ç—ã ----------------
    elif data.startswith("calendar_"):
        date_str = data.split("_")[1]
        if str(user_id) not in user_data_store or not user_data_store[str(user_id)]:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–ºüê±")
            return STATE_TEXT
        user_data_store[str(user_id)][-1]["date"] = date_str
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã

        hours = [f"{i:02}" for i in range(24)]
        keyboard = []
        row = []
        for idx, h in enumerate(hours, 1):
            row.append(InlineKeyboardButton(h, callback_data=f"hour_{h}"))
            if idx % 6 == 0:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")])
        await query.edit_message_text("–í –∫–∞–∫–æ–π —á–∞—Å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_HOUR

    # ---------------- –í—ã–±–æ—Ä —á–∞—Å–∞ ----------------
    elif data.startswith("hour_"):
        if str(user_id) not in user_data_store or not user_data_store[str(user_id)]:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–ºüê±")
            return STATE_TEXT
        hour_str = data.split("_")[1]
        try:
            hour = int(hour_str)
        except ValueError:
            await query.edit_message_text("–≠—Ö—ä, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üòø")
            return STATE_HOUR
        user_data_store[str(user_id)][-1]["hour"] = hour
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–∞

        keyboard = []
        row = []
        for i in range(0, 60, 5):
            row.append(InlineKeyboardButton(f"{i:02}", callback_data=f"minute_{i}"))
            if len(row) == 6:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")])
        await query.edit_message_text("–ê –≤ –∫–∞–∫—É—é –º–∏–Ω—É—Ç–∫—É?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_MINUTE

    # ---------------- –í—ã–±–æ—Ä –º–∏–Ω—É—Ç ----------------
    elif data.startswith("minute_"):
        if str(user_id) not in user_data_store or not user_data_store[str(user_id)]:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–ºüê±")
            return STATE_TEXT
        try:
            minute = int(data.split("_")[1])
        except ValueError:
            await query.edit_message_text("–≠—Ö—ä, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞üòø")
            return STATE_MINUTE
        user_data_store[str(user_id)][-1]["minute"] = minute
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω—É—Ç

        keyboard = [
            [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä—è—Ç—å?", callback_data="repeat"),
             InlineKeyboardButton("–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å", callback_data="no_repeat")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]
        ]
        await query.edit_message_text("–ö–æ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_REPEAT

    # ---------------- –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å ----------------
    elif data == "repeat":
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="daily")],
            [InlineKeyboardButton("–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="weekly")],
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", callback_data="monthly")],
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –≥–æ–¥", callback_data="yearly")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_REPEAT

    elif data in ["daily", "weekly", "monthly", "yearly", "no_repeat"]:
        user_data_store[str(user_id)][-1]["repeat"] = data
        reminder = user_data_store[str(user_id)][-1]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        date_str = reminder['date']
        hour = reminder['hour']
        minute = reminder['minute']
        user_tz = get_user_timezone(user_id)
        user_timezone = pytz.timezone(user_tz)
        
        reminder_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        reminder_datetime = user_timezone.localize(
            datetime.combine(reminder_date, datetime.min.time()).replace(hour=hour, minute=minute)
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—è—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tz_name = "–ú–æ—Å–∫–≤–∞"
        for key, value in RUSSIAN_TIMEZONES.items():
            if value[1] == user_tz:
                tz_name = value[0]
                break
        
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ï—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫–∞!")
        await query.message.reply_text(
            f"–¢–µ–∫—Å—Ç: {reminder['text']}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {reminder_datetime.strftime('%d.%m.%Y %H:%M')} ({tz_name})\n"
            f"–ü–æ–≤—Ç–æ—Ä: {data}"
        )
        
        await schedule_reminder(user_id, context, reminder)
        return await start(update, context)

    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return STATE_START

# ---------------------- –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ----------------------
async def text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    if str(user_id) not in user_data_store:
        user_data_store[str(user_id)] = []
    user_data_store[str(user_id)].append({"text": text})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    save_data()

    keyboard = [
        [InlineKeyboardButton("–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", callback_data="when")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")]
    ]
    await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω—É–ª—å–∫—É üò∫", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_START

# ---------------------- –ö–∞–ª–µ–Ω–¥–∞—Ä—å ----------------------
async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE, month_offset=0):
    query = update.callback_query
    now = datetime.now()
    year = now.year + (now.month + month_offset - 1) // 12
    month = (now.month + month_offset - 1) % 12 + 1
    keyboard = []

    first_day = datetime(year, month, 1)
    last_day = (first_day.replace(month=month % 12 + 1, day=1) - timedelta(days=1)).day

    for week_start in range(1, last_day + 1, 7):
        row = []
        for d in range(week_start, min(week_start + 7, last_day + 1)):
            day_date = datetime(year, month, d).date()
            if day_date >= now.date():
                row.append(InlineKeyboardButton(str(d), callback_data=f"calendar_{day_date}"))
            else:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–°–ª–µ–¥. –º–µ—Å—è—Ü", callback_data="next_month")])
    keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é—à–∫—É", callback_data="back_to_start")])

    try:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    except:
        pass

# ---------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------------------
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    restore_reminders(application)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_START: [CallbackQueryHandler(button)],
            STATE_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, text_input), 
                CallbackQueryHandler(button)
            ],
            STATE_CALENDAR: [CallbackQueryHandler(button)],
            STATE_HOUR: [CallbackQueryHandler(button)],
            STATE_MINUTE: [CallbackQueryHandler(button)],
            STATE_REPEAT: [CallbackQueryHandler(button)],
            STATE_SELECT_REMINDER: [CallbackQueryHandler(button)],
            STATE_CONFIRM_STOP: [CallbackQueryHandler(button)],
            STATE_TIMEZONE: [CallbackQueryHandler(button)],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    )

    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()